library(quantmod)
library(quantmod)
library(quantmod)
from.dat <- asDate("01/01/08", format='%m/%d/%y')
from.dat <- asDate("01/01/08", format="%m/%d/%y")
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat,to = to.dat)
getSymbols("GOOG", src="google", from = from.dat,to = to.dat)
head("GOOG")
?getSymbols
head(GOOG)
View(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat,to = to.dat)
head(GOOG)
table(GOOG.Volume)
table(GOOG$Volume)
table(GOOG.Volume)
str(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
head(GOOG)
library(quantmod)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
mGoog <- to.monthly(GOOG)
from.dat <- as.Date("01/01/08", format="%m/%d/%y")
to.dat <- as.Date("12/31/13", format="%m/%d/%y")
getSymbols("GOOG", src="google", from = from.dat, to = to.dat)
head(GOOG)
mGoog <- to.monthly(GOOG)
googleOpen <- Op(mGoog)
GOOG <- getSymbols.google("GOOG", from='2008-01-01', to = '2013-12-31', verbose= FALSE, auto.assign=FALSE)
GOOG <-(GOOG, select = -GOOG.Volume)
GOOG <- subset(GOOG, select = -GOOG.Volume)
mGoog <- to.monthly(GOOG)
ts1 <- ts(googOpen, frequency=12)
googOpen <- Op(mGoog)
ts1 <- ts(googOpen, frequency=12)
plot(ts1,xlab="Years+1", ylab="GOOG" )
plot(ts1,xlab="Years+1", ylab="GOOG" )
plot(decompose(ts1), xlab="Years=1")
plot(ts1,xlab="Years+1", ylab="GOOG" )
plot(decompose(ts1), xlab="Years=1")
ts1train <- window(ts1,start=1,end=5)
ts1test <- window(ts1,start=5,end=(7-0.01))
ts1train
plot(tsTrain)
ts1Train <- window(ts1,start=1,end=5)
ts1Test <- window(ts1,start=5,end=(7-0.01))
ts1Train
ts1Test <- window(ts1,start=5,end=(7-0.01))
ts1Train
plot(ts1Train)
lines(ma(ts1Train,order=3),col="red")
?ma
ets1 <- ets(ts1Train,model="MMM")
library(forecast)
library(forecast)
library(forecast)
lines(ma(ts1Train,order=3),col="red")
ets1 <- ets(ts1Train,model="MMM")
fcast <- forecast(ets1)
plot(fcast)
lines(ts1Test,col="red")
accuracy(fcast,ts1Test)
accuracy(fcast,ts1Test)
install.packages("caret")
install.packages("dplyr")
install.packages("lazyeval")
install.packages("dplyr")
install.packages("lazyeval")
q()
install.packages("randomForest")
install.packages("e1071")
q()
install.packages("caret")
q()
x <- sample(c("H","T"), 10, replace=T)
x
table(x)
table(x)/10
x <- sample(c("H","T"), 100, replace=T)
table(x)/100
x <- sample(c("H","T"), 100, replace=T)
table(x)/100
x <- sample(c("H","T"), 100, replace=T)
table(x)/100
x <- sample(c("H","T"), 100, replace=T)
table(x)/100
dbinom(4, size= 12, prob = 0.2)
dbinom(3, size= 12, prob = 0.2)
dbinom(1, size= 12, prob = 0.2)
dbinom(1, size= 12, prob = 0.2)
dbinom(2, size= 12, prob = 0.2)
dbinom(4, size= 12, prob = 0.2)
dbinom(0, size= 12, prob = 0.2)
pbinom(4, size= 12, prob = 0.2)
ppois(16, lambda=12)
ppois(16, lambda=12 , lower=FALSE)
pnorm(84, mean= 72, sd = 15.2, lower.tail=FALSE)
pnorm(84, mean= 72, sd = 15.2, lower.tail=TRUE)
milsa <- edit(data.frame())
milsa <- edit(data.frame())
q()
library(recommmenderlab)
library(recommmenderlab)
library(recommenderlab)
m <- matrix(sample(c(as.numeric(1:5),NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = past("user", 1:5, sep = '')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = past("user", 1:5, sep = '')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = past("user", 1:5, sep = '')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = past("user", 1:5, sep = '')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep = '')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep ='')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep ='')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep ='')),
item=paste("item", 1:10, sep=''))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep ='')),
item=paste("item", 1:10, sep='')))
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep =''),
item=paste("item", 1:10, sep='')))
View(m)
r <- as(m, "realRatingMatrix")
r
r_m <- normalize(r)
r_m
class(r_m)
r_b <- binarize(r, minRating=3)
r_b
r_b
r_b <- binarize(r, minRating=3)
names(r_b)
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep =''),
item=paste("item", 1:10, sep='')))
r <- as(m, "realRatingMatrix")
r_m <- normalize(r)
r_b <- binarize(r, minRating=3)
r_b
View(r_b)
r_b[1,]
r_b[2,]
image(r)
r_b
dim(r_b)
r_b
View(r_b)
r_b
as(b,"matrix")
as(r_b,"matrix")
as(r_b, "matrix")
m <- matrix(sample(c(as.numeric(1:5), NA), 50,
replace = TRUE, prob = c(0.1,0.05,0.1,0.15,0.1,0.5)),
ncol = 10,
dimnames = list(user = paste("user", 1:5, sep =''),
item=paste("item", 1:10, sep='')))
m
r <- as(m, "realRatingMatrix")
r_m <- normalize(r)
r_b <- binarize(r, minRating=3)
as(r_b, "matrix")
data(Movielense)
data(MovieLense)
Movielense
MovieLense
as(MovieLense, "matrix")
View(as(MovieLense, "matrix"))
image(sampe(MovieLense,500))
image(sample(MovieLense,500))
library(ggplot2)
ggplot(data.frame(ratings=getRatings(MovielLense)),)
ggplot(data.frame(ratings=getRatings(MovielLense)),aes(ratings)) +
geom_bar(binwidth=1) + theme_bw()
ggplot(data.frame(ratings=getRatings(MovieLense)),aes(ratings)) +
geom_bar(binwidth=1) + theme_bw()
scheme <- evaLuationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
MovieLense
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaLuationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method="split", train=0.8)
scheme <- evaluationScheme(MovieLense, method="bootstrap",k=10, train=0.8)
MovieLense
scheme <- evaluationScheme(MovieLense, method = "split", train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split",given=100, train=0.8)
dim(MovieLense)
scheme <- evaluationScheme(MovieLense, method = "split",given=943, train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split",given=943, train=0.8)
scheme <- evaluationScheme(MovieLense, method = "split",given=15, train=0.8)
scheme <- evaluationScheme(MovieLense, method = "boostrap",k=10, train=0.8)
scheme <- evaluationScheme(MovieLense, method = "boostrap",given=10, train=0.8)
scheme <- evaluationScheme(MovieLense, method = "bootstrap",given=10, train=0.8)
es <- evaluationScheme(MovieLense, method="cross-validation, goodRating=4,k=4,given= 10")
es <- evaluationScheme(MovieLense, method="cross-validation", goodRating=4,k=4, given= 10)
algorithms <- list(
RANDOM = list(name = "RANDOM", param = NULL),
POPULAR = list(name = "Popular", param = NULL),
UBCF = list(name = "UBCF", param = list(
normalize=NULL, method = "Cosine", nn=50)),
SVD = list(name = "SVD", param =
list(categories=30,normalize=NULL,
treat_na = "median")))
algorithms <- list()
algorithms <- list()
es <- evaluationScheme(MovieLense, method="cross-validation", goodRating= 4, k = 4, given = 10)
es
as(es,"matrix")
as(es,"matrix")
es
View(es)
as(es,"matrix")
es
evlist <- evaluate(es, algorithms, n=c(1,3,5,10,15))
evlist
evlist <- evaluate(es, algorithms, n=c(1,3,5,10,15,20))
evlist
plot(evlist,annotat=1:5,legend="topleft")
setwd('/home/raul/R/RProjects//Otto_Group_Product_Classification_Challenge/DATA/')
library(ggplot2)
library(dplyr)
library(caret)
train <- read.csv("train.csv",sep = ",")
test <- read.csv("test.csv", sep = ",")
plot(train$feat_1,train$target)
plot(train$target,train$feat_1)
cor(train$feat_1,train$feat_2)
train -> train[,-c(1)]
train
cor(train$feat_1,train$feat_2)
plot(train$feat_1,train$feat_2)
names(train)
train -> train[,-c(1)]
train -> train[,-c(1)]
names(train)
train_b -> train[,-c(1)]
train_b -> train[,-c(1)]
train_b <- train[,-c(1)]
train <- train[,-c(1)]
plot(train$feat_1,train$feat_2)
cor(train$feat_1,train$feat_2)
train
names(train)
cor(train$feat_1,train$feat_40)
plot(train$feat_1,train$feat_2)
plot(train$feat_1,train$feat_40)
cor(train$feat_1,train$feat_40)
plot(train$feat_1,train$feat_2)
cor(train$feat_1,train$feat_2)
View(train)
setwd('/home/raul/R/RProjects//Otto_Group_Product_Classification_Challenge/DATA/')
library(ggplot2)
library(dplyr)
library(caret)
train <- read.csv("train.csv",sep = ",")
test <- read.csv("test.csv", sep = ",")
View(train)
train <- train[,-c(1)]
View(train)
plot(train$feat_1,train$feat_2)
cor(train$feat_1,train$feat_2)
cor(train$feat_1,train$feat_40)
cor(train$feat_1,train$feat_39)
M <- cor(train) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
M <- cor(train) # get correlations
d <- data.frame(x1=rnorm(10),
x2=rnorm(10),
x3=rnorm(10))
M <- cor(d) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
str(d)
str(train)
train <- as.Numeric(train)
train <- as.numeric(train)
names(train)
train <- train[,-c(1,94)]
train <- as.numeric(train)
names(train)
lapply(train, as.numeric)
train_2 <- lapply(train, as.numeric)
View()
View(train_2)
setwd('/home/raul/R/RProjects//Otto_Group_Product_Classification_Challenge/DATA/')
library(ggplot2)
library(dplyr)
library(caret)
train <- read.csv("train.csv",sep = ",")
test <- read.csv("test.csv", sep = ",")
names(train)
train <- train[,-c(1,95)]
train <- as.numeric(train)
train_2 <- lapply(train, as.numeric)
View(train)
View(train_2)
str(train_2)
M <- cor(train_2) # get correlations
d <- data.frame(x1=rnorm(10),
x2=rnorm(10),
x3=rnorm(10))
str(d)
str(train)
str(train_2)
M <- cor(train_2) # get correlations
M <- cor(train_2$feat_1,train$feat_2) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
M <- cor(train_2) # get correlations
str(d)
M <- cor(d) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
M <- cor(train) # get correlations
M <- cor(train) # get correlations
M <- cor(train_2) # get correlations
View(train_2)
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
M <- cor(train_2) # get correlations
M <- cor(train) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
str(train)
M <- cor(train) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
cor(train$feat_39,train$feat_45)
cor(train$feat_72,train$feat_15)
cor(train$feat_46,train$feat_3)
cor(train$feat_54,train$feat_3)
plot(train$feat_1,train$feat_2)
plot(train$feat_54,train$feat_3)
plot(train$feat_39,train$feat_45)
cor(train$feat_39,train$feat_45)
M <- cor(train) # get correlations
library('corrplot') #package corrplot
corrplot(M, method = "circle") #plot matrix
